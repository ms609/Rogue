# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - "Meta**"
      - "memcheck**"
      - "docs**"
      - "**.git"
      - "**.json"
      - "**.md"
      - "**.yml"
      - "!**R-cmd-check.yml"
      - "**.R[dD]ata"
      - "**.Rpro*"
  pull_request:
    branches:
      - main
      - master
    paths-ignore:
      - "Meta**"
      - "memcheck**"
      - "docs**"
      - "**.git"
      - "**.json"
      - "**.md"
      - "**.yml"
      - "!**R-cmd-check.yml"
      - "**.R[dD]ata"
      - "**.Rpro*"

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: '4.1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"} # Until TreeDist can slough phangorn
          #- {os: ubuntu-20.04, r: '3.6.3', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      _R_CHECK_FORCE_SUGGESTS_: false
      R_REALLY_FORCE_SYMBOLS: true
      R_COMPILE_AND_INSTALL_PACKAGES: 'never'
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        if: runner.os != 'macOS'
        run: |
          install.packages('remotes')
          saveRDS(
            remotes::dev_package_deps(dependencies = c("soft",
            "Config/Needs/github-actions")), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor),
            ".github/R-version")
        shell: Rscript {0}

      - name: Query dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          install.packages('remotes')
          saveRDS(
            remotes::dev_package_deps(dependencies = c("soft",
            "Config/Needs/coverage", "Config/Needs/github-actions"))
          , ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor),
            ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libpoppler-glib-dev bwidget libavfilter-dev libtesseract-dev gdal-bin proj-bin libgdal-dev libproj-dev tesseract-ocr-eng libleptonica-dev tcl libgtk2.0-dev libgtk-3-dev
          sudo pkg-config --libs poppler-glib
          sudo pkg-config --cflags poppler-glib
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libgit2 xquartz

      - name: Install callr (Windows)
        if: runner.os == 'Windows'
        run: |
          remotes::install_cran("callr")
        shell: Rscript {0}

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = c("soft", "Config/Needs/github-actions"))
        shell: Rscript {0}

      - name: Install coverage dependencies
        if: runner.os == 'macOS'
        run: |
          remotes::install_deps(dependencies = 'Config/Needs/coverage')
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # - name: Upload check results
      #   if: failure()
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ runner.os }}-r${{ matrix.config.r }}-results
      #     path: check

      - name: Test coverage
        if: runner.os == 'macOS'
        run: |
          covr::codecov()
        shell: Rscript {0}
